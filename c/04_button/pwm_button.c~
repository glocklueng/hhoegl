
#include "stm32f10x.h"

#define STACK_TOP 0x20002000-4										/* This can move quite a lot ! */

void nmi_handler(void);												
void hardfault_handler(void);
void SysTickISR(void);
int main(void);

/*	Four vectors - the starting stack pointer value, code entry point and NMI and Hard-Fault handlers */

unsigned int * myvectors[16] 
__attribute__ ((section("vectors")))= {
    (unsigned int *)	STACK_TOP,         
    (unsigned int *) 	main,              
    (unsigned int *)	nmi_handler,       
    (unsigned int *)	hardfault_handler,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    0,
    (unsigned int *)    SysTickISR
};

unsigned char green,blue;

int main(void){	
	int n = 0;
	int button;

	RCC->APB2ENR |= 0x10 | 0x04;									/* Enable the GPIOA (bit 2) and GPIOC (bit 8) */
	GPIOC->CRH = 0x11;												/* Set GPIOC Pin 8 and Pin 9 to outputs */
	GPIOA->CRL = 0x04;												/* Set GPIOA Pin 0 to input floating */
    
    green = 0xF0;
    blue = 0xF0;

    SysTick->LOAD = 0x200;
    SysTick->CTRL = 0x7;

    while(1)
    {
    }
}


void SysTickISR(void){
    static unsigned int counter = 0;
    static unsigned int button_count = 0;
    counter++;
    if(counter > 0xFF){
        counter = 0;
        GPIOC->BSRR = ((1<<25) | (1<<24));
    }
    if(counter > blue)
        GPIOC->BSRR = (1<<8);
    if(counter > green)
        GPIOC->BSRR = (1<<9);
    
    button_count++;
    if(button_count > 0x1FF){
        button_count = 0;
        if((GPIOA->IDR & 0x1)){
            green++;
            blue++;
        }
    }

}

void nmi_handler(void)
{
    return ;
}

void hardfault_handler(void)
{
    return ;
}

